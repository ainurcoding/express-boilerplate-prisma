generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  comment_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  post_id    String?   @db.Uuid
  service_id String?   @db.Uuid
  comment    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  services   services? @relation(fields: [service_id], references: [service_id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model followers {
  follower_id                             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                                 String?   @db.Uuid
  follower_user_id                        String?   @db.Uuid
  created_at                              DateTime? @default(now()) @db.Timestamp(6)
  users_followers_follower_user_idTousers users?    @relation("followers_follower_user_idTousers", fields: [follower_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users_followers_user_idTousers          users?    @relation("followers_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  notification_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String?   @db.Uuid
  type            String    @db.VarChar(50)
  message         String
  is_read         Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  order_id    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  service_id  String?   @db.Uuid
  user_id     String?   @db.Uuid
  order_date  DateTime? @default(now()) @db.Timestamp(6)
  quantity    Int
  total_price Decimal   @db.Decimal(10, 2)
  status      String?   @default("pending") @db.VarChar(50)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  services    services? @relation(fields: [service_id], references: [service_id], onDelete: Cascade, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model otp_requests {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @db.VarChar(255)
  otp        String    @db.VarChar(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  expired_at DateTime? @default(dbgenerated("(now() + '00:05:00'::interval)")) @db.Timestamp(6)
  status     Boolean?  @default(false)
}

model passwordresettokens {
  token_id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String?   @db.Uuid
  token           String    @unique @db.VarChar(255)
  expiration_time DateTime  @db.Timestamp(6)
  is_used         Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model posts {
  post_id    String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?    @db.Uuid
  title      String     @db.VarChar(255)
  content    String?
  image_url  String?
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @default(now()) @db.Timestamp(6)
  comments   comments[]
  users      users?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  recipes    recipes[]
}

model recipes {
  recipe_id    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id      String?   @db.Uuid
  title        String    @db.VarChar(255)
  ingredients  Json      @db.Json
  instructions Json      @db.Json
  cooking_time Int?
  difficulty   String?   @db.VarChar(50)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  posts        posts?    @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
}

model services {
  service_id   String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String?    @db.Uuid
  title        String     @db.VarChar(255)
  description  String
  price        Decimal    @db.Decimal(10, 2)
  location     String?    @db.VarChar(255)
  category     String?    @db.VarChar(100)
  availability Boolean?   @default(true)
  created_at   DateTime?  @default(now()) @db.Timestamp(6)
  updated_at   DateTime?  @default(now()) @db.Timestamp(6)
  comments     comments[]
  orders       orders[]
  users        users?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id                                     String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                       String                @unique @db.VarChar(255)
  password_hash                               String                @db.VarChar(255)
  full_name                                   String                @db.VarChar(255)
  user_type                                   String                @db.VarChar(50)
  profile_picture                             String?
  bio                                         String?
  location                                    String?               @db.VarChar(255)
  created_at                                  DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime?             @default(now()) @db.Timestamp(6)
  comments                                    comments[]
  followers_followers_follower_user_idTousers followers[]           @relation("followers_follower_user_idTousers")
  followers_followers_user_idTousers          followers[]           @relation("followers_user_idTousers")
  notifications                               notifications[]
  orders                                      orders[]
  passwordresettokens                         passwordresettokens[]
  posts                                       posts[]
  services                                    services[]
}
